<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://albawid.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://albawid.github.io/" rel="alternate" type="text/html" /><updated>2025-07-16T09:15:01+00:00</updated><id>https://albawid.github.io/feed.xml</id><title type="html">Blog’e Albawid</title><subtitle>Tempat menulis suatu catatan yang mungkin saja tidak bermanfaat bagi sebagian manusia.</subtitle><entry><title type="html">Fan Control OpenWrt OrangePi Zero 3</title><link href="https://albawid.github.io/posts/fan-control-orangepizero3/" rel="alternate" type="text/html" title="Fan Control OpenWrt OrangePi Zero 3" /><published>2025-07-12T00:00:00+00:00</published><updated>2025-07-12T00:00:00+00:00</updated><id>https://albawid.github.io/posts/fan-control-orangepizero3</id><content type="html" xml:base="https://albawid.github.io/posts/fan-control-orangepizero3/"><![CDATA[<h1 id="note-">NOTE !!!!</h1>
<p><strong><em>Almost 90% of this project are generated by Microsoft Copilot, what i do are just type the prompt project-related or describing feature that i want to add. Fork and edit by yourself if you want to give an improvements, and also don’t pull request</em></strong>.  <em>Thank You</em></p>

<h1 id="fan-control-system-for-openwrt">Fan Control System for OpenWrt</h1>

<p>A modular and configurable smart fan controller designed for embedded systems running OpenWrt. It supports temperature-based logic, time-based scheduling, manual control via LuCI, and debug logging.</p>

<p class="p-gambar tengah" label="Fan Control LuCI Dashboard "><a href="/assets/img/post/fan-control-opiz3/fan-con-dashb.png"><img src="/assets/img/post/fan-control-opiz3/fan-con-dashb.png" alt="Fan Control LuCI Dashboard" /></a></p>

<h1 id="features">Features</h1>

<ul>
  <li>Time-based fan scheduling</li>
  <li>Temperature override with hysteresis</li>
  <li>Manual control via LuCI dashboard</li>
  <li>Debug mode for verbose logging</li>
  <li>Log rotation and rule memory</li>
  <li>Configurable thresholds and active hours (hardcoded)</li>
  <li>Cronjob via <code class="language-plaintext highlighter-rouge">crontab</code> package for automated</li>
</ul>

<h1 id="requirements">Requirements</h1>

<ul>
  <li>Fan 5V/12V 2-pin</li>
  <li><a href="https://a.co/d/awSrPXT">Dual module mosfet</a></li>
  <li>Know the right pin on Orange Pi Zero 3</li>
  <li><code class="language-plaintext highlighter-rouge">gpioset</code> utility (via <code class="language-plaintext highlighter-rouge">gpiod</code> package)</li>
  <li>OpenWrt system with GPIO access</li>
  <li>GPIO pin connected to fan via MOSFET</li>
  <li>LuCI installed</li>
</ul>

<h1 id="how-to-find-the-right-gpio-pin-on-orange-pi-zero-3">How to Find the Right GPIO Pin on Orange Pi Zero 3</h1>

<p>The Orange Pi Zero 3 features a <strong>26-pin GPIO header</strong> that provides access to multiple interfaces including GPIO, UART, SPI, and I2C. To control a fan via a MOSFET, you’ll need to select a GPIO pin that supports digital output.</p>

<h3 id="finding-the-line-number-for-your-gpio-pin">Finding the Line Number for Your GPIO Pin</h3>

<p>Run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gpiodetect
<span class="nv">$ </span>gpioinfo gpiochip0
</code></pre></div></div>
<p>Look for the bunch of line (287 Line in my case) and note its line number.</p>

<h3 id="recommended-gpio-pins-for-fan-control">Recommended GPIO Pins for Fan Control</h3>

<p>Here are some general-purpose output pins you can use:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Physical Pin</th>
      <th style="text-align: left">GPIO Name</th>
      <th style="text-align: left">Line Number</th>
      <th style="text-align: left">Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Pin 3</td>
      <td style="text-align: left">PH5</td>
      <td style="text-align: left">229</td>
      <td style="text-align: left">I2C3_SDA</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 5</td>
      <td style="text-align: left">PH4</td>
      <td style="text-align: left">228</td>
      <td style="text-align: left">I2C3_SCK</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 7</td>
      <td style="text-align: left">PC9</td>
      <td style="text-align: left">73</td>
      <td style="text-align: left">General-purpose GPIO</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 8</td>
      <td style="text-align: left">PH2</td>
      <td style="text-align: left">226</td>
      <td style="text-align: left">UART5_TX</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 10</td>
      <td style="text-align: left">PH3</td>
      <td style="text-align: left">227</td>
      <td style="text-align: left">UART5_RX (I’m Using this)</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 11</td>
      <td style="text-align: left">PC6</td>
      <td style="text-align: left">70</td>
      <td style="text-align: left">General-purpose GPIO</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 12</td>
      <td style="text-align: left">PC11</td>
      <td style="text-align: left">75</td>
      <td style="text-align: left">General-purpose GPIO</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 13</td>
      <td style="text-align: left">PC5</td>
      <td style="text-align: left">69</td>
      <td style="text-align: left">General-purpose GPIO</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 15</td>
      <td style="text-align: left">PC8</td>
      <td style="text-align: left">72</td>
      <td style="text-align: left">General-purpose GPIO</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 16</td>
      <td style="text-align: left">PC15</td>
      <td style="text-align: left">79</td>
      <td style="text-align: left">Recommended for fan control</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 18</td>
      <td style="text-align: left">PC14</td>
      <td style="text-align: left">78</td>
      <td style="text-align: left">Recommended for fan control</td>
    </tr>
    <tr>
      <td style="text-align: left">Pin 22</td>
      <td style="text-align: left">PC7</td>
      <td style="text-align: left">71</td>
      <td style="text-align: left">General-purpose GPIO</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p><strong>Recommended:</strong> Use GPIO23 (Pin 16) or GPIO24 (Pin 18) for fan control. These are safe, general-purpose output pins.</p>
</blockquote>

<h3 id="testing-gpio-output">Testing GPIO Output</h3>

<p>To test manually:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpioset gpiochip0 &lt;line_number&gt;<span class="o">=</span>1  <span class="c"># Set HIGH</span>
gpioset gpiochip0 &lt;line_number&gt;<span class="o">=</span>0  <span class="c"># Set LOW</span>
</code></pre></div></div>

<h3 id="wiring-diagram">Wiring Diagram</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Orange Pi Zero 3 (26-pin)        Dual MOSFET Module         Fan
--------------------------       -------------------        ------
Pin 2  (5V) -------------&gt;       VCC (Vin +) -------&gt;       [Fan V+]
Pin 6  (GND) ------------&gt;       GND (Vin -) -------&gt;       [Fan GND]
Pin 10 (Line 227) -------&gt;       PWM (MOSFET Channel 1)

Optional:
Pin 18 (GPIO24) ---------&gt;       PWM (MOSFET Channel 2)    (for second fan)
</code></pre></div></div>

<p>Correct real-world wired scheme will look like this</p>

<p class="p-gambar tengah" label="Correct Real-World Wired Scheme"><a href="/assets/img/post/fan-control-opiz3/Wired-Scheme.png"><img src="/assets/img/post/fan-control-opiz3/Wired-Scheme.png" alt="Correct Real-World Wired Scheme" /></a></p>

<blockquote>
  <p>Make sure your MOSFET is wired correctly, you can directly <strong>jumper PWM from Mosfet to 5V pin</strong> to make sure your wiring is correct and fan should spining at this moment.</p>
</blockquote>

<h3 id="how-to-use-gpio-with-gpioset">How to Use GPIO with <code class="language-plaintext highlighter-rouge">gpioset</code></h3>

<p>Orange Pi Zero 3 uses the <strong>Linux GPIO character device interface</strong> via <code class="language-plaintext highlighter-rouge">gpiod</code>. To control a pin:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gpioset gpiochip0 <span class="nv">227</span><span class="o">=</span>1  <span class="c"># Turn fan ON</span>
<span class="nv">$ </span>gpioset gpiochip0 <span class="nv">227</span><span class="o">=</span>0  <span class="c"># Turn fan OFF</span>
</code></pre></div></div>

<blockquote>
  <p>Replace <code class="language-plaintext highlighter-rouge">227</code> with the correct line number of your GPIO pin. You can find this using <code class="language-plaintext highlighter-rouge">gpiodetect</code> and <code class="language-plaintext highlighter-rouge">gpioinfo</code>. or if you still don’t know which the right line number, just try it one by one. <strong>Do not using line number that already used to avoid system fail or your devices electricity will be short in worse case</strong></p>
</blockquote>

<h1 id="file-structure">File Structure</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/fan-control.service.sh                         # Main logic script
/fan-on.sh                                      # Manual ON script
/fan-off.sh                                     # Manual OFF script

/usr/lib/lua/luci/controller/fan/fan.lua        # LuCI controller
/usr/lib/lua/luci/model/cbi/fan/status.lua      # Define Dashboard Layout
/usr/lib/lua/luci/view/fan/logview.htm          # Last 10 Fan Log View 
/usr/lib/lua/luci/view/fan/statusinfo.htm       # Status Fan Info
/usr/lib/lua/luci/view/fan/buttonrow.htm        # Three manual button
/usr/lib/lua/luci/view/fan/cronjobtoggle.htm    # Enable/disable fan cronjob service

/tmp/fan.log                                    # Runtime log
/tmp/fan.state                                  # Current fan state
/tmp/fan.last_rule                              # Last rule applied
/tmp/fan.debug                                  # Debug mode flag
/tmp/fan-service.state                          # Tracks fan cronjob service
</code></pre></div></div>

<h1 id="main-logic-script-hardcoded">Main Logic Script (Hardcoded)</h1>

<figure class="highlight" file="/fan-control.service.sh"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="code"><pre><span class="c">#!/bin/sh</span>
<span class="c"># === Parse --debug flag ===</span>
<span class="nv">DEBUG</span><span class="o">=</span>0
<span class="o">[</span> <span class="nt">-f</span> /tmp/fan.debug <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">DEBUG</span><span class="o">=</span>1
<span class="o">[</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"--debug"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">DEBUG</span><span class="o">=</span>1

log_debug<span class="o">()</span> <span class="o">{</span>
  <span class="o">[</span> <span class="s2">"</span><span class="nv">$DEBUG</span><span class="s2">"</span> <span class="nt">-eq</span> 1 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"[DEBUG] </span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /tmp/fan.log
<span class="o">}</span>
<span class="c"># === Configurable Temp Thresholds and Active Hours ===</span>
<span class="nv">TEMP_ON_THRESHOLD</span><span class="o">=</span>61
<span class="nv">TEMP_OFF_THRESHOLD</span><span class="o">=</span>41
<span class="nv">ACTIVE_START</span><span class="o">=</span>8
<span class="nv">ACTIVE_END</span><span class="o">=</span>22
<span class="c"># === Smart Fan Controller with Rule Memory &amp; Hysteresis ===</span>
<span class="nv">GPIO</span><span class="o">=</span><span class="s2">"/usr/bin/gpioset gpiochip0 227"</span>
<span class="nv">TEMP_RAW</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> /sys/class/thermal/thermal_zone0/temp<span class="si">)</span>
<span class="nv">TEMP_C</span><span class="o">=</span><span class="si">$(</span><span class="nb">expr</span> <span class="nv">$TEMP_RAW</span> / 1000<span class="si">)</span>
<span class="nv">HOUR</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%H<span class="si">)</span>
<span class="nv">LOG</span><span class="o">=</span><span class="s2">"/tmp/fan.log"</span>
<span class="nv">STATE_FILE</span><span class="o">=</span><span class="s2">"/tmp/fan.state"</span>
<span class="nv">RULE_FILE</span><span class="o">=</span><span class="s2">"/tmp/fan.last_rule"</span>
<span class="nv">MAX_LINES</span><span class="o">=</span>100
<span class="c"># === Log rotation ===</span>
<span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LOG</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">LINE_COUNT</span><span class="o">=</span><span class="si">$(</span><span class="nb">wc</span> <span class="nt">-l</span> &lt; <span class="s2">"</span><span class="nv">$LOG</span><span class="s2">"</span><span class="si">)</span>
<span class="o">[</span> <span class="s2">"</span><span class="nv">$LINE_COUNT</span><span class="s2">"</span> <span class="nt">-gt</span> <span class="s2">"</span><span class="nv">$MAX_LINES</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">tail</span> <span class="nt">-n</span> <span class="nv">$MAX_LINES</span> <span class="s2">"</span><span class="nv">$LOG</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="k">${</span><span class="nv">LOG</span><span class="k">}</span><span class="s2">.tmp"</span> <span class="o">&amp;&amp;</span> <span class="nb">mv</span> <span class="s2">"</span><span class="k">${</span><span class="nv">LOG</span><span class="k">}</span><span class="s2">.tmp"</span> <span class="s2">"</span><span class="nv">$LOG</span><span class="s2">"</span>
<span class="c"># === Load current state and last rule ===</span>
<span class="nv">CURRENT_STATE</span><span class="o">=</span><span class="s2">"unknown"</span>
<span class="nv">LAST_RULE</span><span class="o">=</span><span class="s2">"none"</span>
<span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">CURRENT_STATE</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="nv">$STATE_FILE</span><span class="s2">"</span><span class="si">)</span>
<span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$RULE_FILE</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">LAST_RULE</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="nv">$RULE_FILE</span><span class="s2">"</span><span class="si">)</span>

log_debug <span class="s2">"TEMP_C=</span><span class="nv">$TEMP_C</span><span class="s2">, HOUR=</span><span class="nv">$HOUR</span><span class="s2">, STATE=</span><span class="nv">$CURRENT_STATE</span><span class="s2">, RULE=</span><span class="nv">$LAST_RULE</span><span class="s2">"</span>
log_debug <span class="s2">"Running fan-control.service.sh at </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>
<span class="c"># === Temperature Override with Hysteresis ===</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$TEMP_C</span><span class="s2">"</span> <span class="nt">-ge</span> <span class="s2">"</span><span class="nv">$TEMP_ON_THRESHOLD</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CURRENT_STATE</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"on"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nv">$GPIO</span><span class="o">=</span>1
    <span class="nb">echo</span> <span class="s2">"on"</span> <span class="o">&gt;</span> <span class="nv">$STATE_FILE</span>
    <span class="nb">echo</span> <span class="s2">"temp"</span> <span class="o">&gt;</span> <span class="nv">$RULE_FILE</span>
    <span class="nb">echo</span> <span class="s2">"[Temp Override] Fan ON @ </span><span class="k">${</span><span class="nv">TEMP_C</span><span class="k">}</span><span class="s2">°C - </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$LOG</span>
  <span class="k">fi
  </span><span class="nb">exit </span>0
<span class="k">elif</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$TEMP_C</span><span class="s2">"</span> <span class="nt">-le</span> <span class="s2">"</span><span class="nv">$TEMP_OFF_THRESHOLD</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$HOUR</span><span class="s2">"</span> <span class="nt">-ge</span> <span class="s2">"</span><span class="nv">$ACTIVE_START</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$HOUR</span><span class="s2">"</span> <span class="nt">-lt</span> <span class="s2">"</span><span class="nv">$ACTIVE_END</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"[Temp Override] Skipped OFF due to active hours @ </span><span class="k">${</span><span class="nv">TEMP_C</span><span class="k">}</span><span class="s2">°C - </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$LOG</span>
    <span class="nb">exit </span>0
  <span class="k">fi
  if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CURRENT_STATE</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"off"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nv">$GPIO</span><span class="o">=</span>0
    <span class="nb">echo</span> <span class="s2">"off"</span> <span class="o">&gt;</span> <span class="nv">$STATE_FILE</span>
    <span class="nb">echo</span> <span class="s2">"temp"</span> <span class="o">&gt;</span> <span class="nv">$RULE_FILE</span>
    <span class="nb">echo</span> <span class="s2">"[Temp Override] Fan OFF @ </span><span class="k">${</span><span class="nv">TEMP_C</span><span class="k">}</span><span class="s2">°C - </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$LOG</span>
  <span class="k">fi
  </span><span class="nb">exit </span>0
<span class="k">fi</span>
<span class="c"># === Time Logic (only if last rule was time or fan is off) ===</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$LAST_RULE</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"time"</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CURRENT_STATE</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"off"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$HOUR</span><span class="s2">"</span> <span class="nt">-ge</span> <span class="s2">"</span><span class="nv">$ACTIVE_START</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$HOUR</span><span class="s2">"</span> <span class="nt">-lt</span> <span class="s2">"</span><span class="nv">$ACTIVE_END</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CURRENT_STATE</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"on"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
      <span class="nv">$GPIO</span><span class="o">=</span>1
      <span class="nb">echo</span> <span class="s2">"on"</span> <span class="o">&gt;</span> <span class="nv">$STATE_FILE</span>
      <span class="nb">echo</span> <span class="s2">"time"</span> <span class="o">&gt;</span> <span class="nv">$RULE_FILE</span>
      <span class="nb">echo</span> <span class="s2">"[Time Logic] Fan ON @ </span><span class="k">${</span><span class="nv">TEMP_C</span><span class="k">}</span><span class="s2">°C - </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$LOG</span>
    <span class="k">fi
  else
    if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CURRENT_STATE</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"off"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
      <span class="nv">$GPIO</span><span class="o">=</span>0
      <span class="nb">echo</span> <span class="s2">"off"</span> <span class="o">&gt;</span> <span class="nv">$STATE_FILE</span>
      <span class="nb">echo</span> <span class="s2">"time"</span> <span class="o">&gt;</span> <span class="nv">$RULE_FILE</span>
      <span class="nb">echo</span> <span class="s2">"[Time Logic] Fan OFF @ </span><span class="k">${</span><span class="nv">TEMP_C</span><span class="k">}</span><span class="s2">°C - </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$LOG</span>
    <span class="k">fi
  fi
fi</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="logic-overview">Logic Overview</h1>

<h3 id="temperature-override">Temperature Override</h3>

<ul>
  <li>Fan turns ON if temperature ≥ <code class="language-plaintext highlighter-rouge">TEMP_ON_THRESHOLD</code></li>
  <li>Fan turns OFF if temperature ≤ <code class="language-plaintext highlighter-rouge">TEMP_OFF_THRESHOLD</code>, <strong>unless within active hours</strong></li>
</ul>

<h3 id="time-logic">Time Logic</h3>

<ul>
  <li>Fan turns ON between <code class="language-plaintext highlighter-rouge">ACTIVE_START</code> and <code class="language-plaintext highlighter-rouge">ACTIVE_END</code> if last rule was time or fan is OFF</li>
  <li>Fan turns OFF outside active hours</li>
</ul>

<h3 id="manual-control">Manual Control</h3>

<ul>
  <li>Clicking Fan ON/OFF in LuCI directly sets GPIO and updates state</li>
  <li>No override flag is used — service logic may override manual actions unless thresholds or time logic prevent it</li>
</ul>

<blockquote>
  <p>Also you can change Active Hour or Temp Threshold directly in the script base on you environment if you want</p>
</blockquote>

<h1 id="luci-integration">LuCI Integration</h1>

<h3 id="luci-controller">LuCI Controller</h3>

<figure class="highlight" file="/usr/lib/lua/luci/controller/fan/fan.lua"><pre><code class="language-lua" data-lang="lua"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="n">module</span><span class="p">(</span><span class="s2">"luci.controller.fan.fan"</span><span class="p">,</span> <span class="n">package</span><span class="p">.</span><span class="n">seeall</span><span class="p">)</span>

<span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
  <span class="n">entry</span><span class="p">({</span><span class="s2">"admin"</span><span class="p">,</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"fan"</span><span class="p">},</span> <span class="n">cbi</span><span class="p">(</span><span class="s2">"fan/status"</span><span class="p">),</span> <span class="n">_</span><span class="p">(</span><span class="s2">"Fan Control"</span><span class="p">),</span> <span class="mi">90</span><span class="p">)</span>
  <span class="n">entry</span><span class="p">({</span><span class="s2">"admin"</span><span class="p">,</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"fan"</span><span class="p">,</span> <span class="s2">"on"</span><span class="p">},</span> <span class="n">call</span><span class="p">(</span><span class="s2">"fan_on"</span><span class="p">),</span> <span class="kc">nil</span><span class="p">).</span><span class="n">leaf</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="n">entry</span><span class="p">({</span><span class="s2">"admin"</span><span class="p">,</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"fan"</span><span class="p">,</span> <span class="s2">"off"</span><span class="p">},</span> <span class="n">call</span><span class="p">(</span><span class="s2">"fan_off"</span><span class="p">),</span> <span class="kc">nil</span><span class="p">).</span><span class="n">leaf</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="n">entry</span><span class="p">({</span><span class="s2">"admin"</span><span class="p">,</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"fan"</span><span class="p">,</span> <span class="s2">"debug"</span><span class="p">},</span> <span class="n">call</span><span class="p">(</span><span class="s2">"toggle_debug"</span><span class="p">),</span> <span class="kc">nil</span><span class="p">).</span><span class="n">leaf</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="n">entry</span><span class="p">({</span><span class="s2">"admin"</span><span class="p">,</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"fan"</span><span class="p">,</span> <span class="s2">"cronjob_enable"</span><span class="p">},</span> <span class="n">call</span><span class="p">(</span><span class="s2">"cronjob_enable"</span><span class="p">),</span> <span class="kc">nil</span><span class="p">).</span><span class="n">leaf</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="n">entry</span><span class="p">({</span><span class="s2">"admin"</span><span class="p">,</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"fan"</span><span class="p">,</span> <span class="s2">"cronjob_disable"</span><span class="p">},</span> <span class="n">call</span><span class="p">(</span><span class="s2">"cronjob_disable"</span><span class="p">),</span> <span class="kc">nil</span><span class="p">).</span><span class="n">leaf</span> <span class="o">=</span> <span class="kc">true</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">cronjob_enable</span><span class="p">()</span>
  <span class="kd">local</span> <span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">"nixio.fs"</span>
  <span class="kd">local</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">os.date</span><span class="p">(</span><span class="s2">"%Y-%m-%d %H:%M:%S"</span><span class="p">)</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="s2">"grep -q '/fan-control.service.sh' /etc/rc.local || sed -i '/^exit 0/i /fan-control.service.sh' /etc/rc.local"</span><span class="p">)</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="s2">"(crontab -l 2&gt;/dev/null | grep -v '/fan-control.service.sh'; echo '*/2 * * * * /fan-control.service.sh') | crontab -"</span><span class="p">)</span>
  <span class="n">fs</span><span class="p">.</span><span class="n">writefile</span><span class="p">(</span><span class="s2">"/tmp/fan-service.state"</span><span class="p">,</span> <span class="s2">"enabled"</span><span class="p">)</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span><span class="s2">"echo 'Fan Cronjob Service ENABLED via LuCI at %s' &gt;&gt; /tmp/fan.log"</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">))</span>
  <span class="n">luci</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">redirect</span><span class="p">(</span><span class="n">luci</span><span class="p">.</span><span class="n">dispatcher</span><span class="p">.</span><span class="n">build_url</span><span class="p">(</span><span class="s2">"admin/system/fan"</span><span class="p">))</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">cronjob_disable</span><span class="p">()</span>
  <span class="kd">local</span> <span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">"nixio.fs"</span>
  <span class="kd">local</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">os.date</span><span class="p">(</span><span class="s2">"%Y-%m-%d %H:%M:%S"</span><span class="p">)</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="s2">"sed -i '/\\/fan-control\\.service\\.sh/d' /etc/rc.local"</span><span class="p">)</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="s2">"crontab -l 2&gt;/dev/null | grep -v '/fan-control.service.sh' | crontab -"</span><span class="p">)</span>
  <span class="n">fs</span><span class="p">.</span><span class="n">writefile</span><span class="p">(</span><span class="s2">"/tmp/fan-service.state"</span><span class="p">,</span> <span class="s2">"disabled"</span><span class="p">)</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span><span class="s2">"echo 'Fan Cronjob Service DISABLED via LuCI at %s' &gt;&gt; /tmp/fan.log"</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">))</span>
  <span class="n">luci</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">redirect</span><span class="p">(</span><span class="n">luci</span><span class="p">.</span><span class="n">dispatcher</span><span class="p">.</span><span class="n">build_url</span><span class="p">(</span><span class="s2">"admin/system/fan"</span><span class="p">))</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">fan_on</span><span class="p">()</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="s2">"/fan-on.sh"</span><span class="p">)</span>
  <span class="n">luci</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">redirect</span><span class="p">(</span><span class="n">luci</span><span class="p">.</span><span class="n">dispatcher</span><span class="p">.</span><span class="n">build_url</span><span class="p">(</span><span class="s2">"admin/system/fan"</span><span class="p">))</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">fan_off</span><span class="p">()</span>
  <span class="nb">os.execute</span><span class="p">(</span><span class="s2">"/fan-off.sh"</span><span class="p">)</span>
  <span class="n">luci</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">redirect</span><span class="p">(</span><span class="n">luci</span><span class="p">.</span><span class="n">dispatcher</span><span class="p">.</span><span class="n">build_url</span><span class="p">(</span><span class="s2">"admin/system/fan"</span><span class="p">))</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">toggle_debug</span><span class="p">()</span>
  <span class="kd">local</span> <span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">"nixio.fs"</span>
  <span class="k">if</span> <span class="n">fs</span><span class="p">.</span><span class="n">access</span><span class="p">(</span><span class="s2">"/tmp/fan.debug"</span><span class="p">)</span> <span class="k">then</span>
    <span class="n">fs</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s2">"/tmp/fan.debug"</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">fs</span><span class="p">.</span><span class="n">writefile</span><span class="p">(</span><span class="s2">"/tmp/fan.debug"</span><span class="p">,</span> <span class="s2">"1"</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">luci</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">redirect</span><span class="p">(</span><span class="n">luci</span><span class="p">.</span><span class="n">dispatcher</span><span class="p">.</span><span class="n">build_url</span><span class="p">(</span><span class="s2">"admin/system/fan"</span><span class="p">))</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="cronjob-logic">Cronjob Logic</h3>

<ul>
  <li><strong>Enabled</strong>:
    <ul>
      <li>Adds <code class="language-plaintext highlighter-rouge">/fan-control.service.sh</code> to <code class="language-plaintext highlighter-rouge">/etc/rc.local</code></li>
      <li>Schedules it via <code class="language-plaintext highlighter-rouge">crontab</code> every 2 minutes</li>
      <li>Updates <code class="language-plaintext highlighter-rouge">/tmp/fan-service.state</code></li>
    </ul>
  </li>
  <li><strong>Disabled</strong>:
    <ul>
      <li>Removes script from <code class="language-plaintext highlighter-rouge">rc.local</code> and <code class="language-plaintext highlighter-rouge">crontab</code></li>
      <li>Updates <code class="language-plaintext highlighter-rouge">/tmp/fan-service.state</code></li>
    </ul>
  </li>
</ul>

<h3 id="manual-scripts">Manual Scripts</h3>

<figure class="highlight" file="/fan-on.sh"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="c">#!/bin/sh</span>
<span class="nb">echo</span> <span class="s2">"on"</span> <span class="o">&gt;&gt;</span> /tmp/fan.state
<span class="nb">echo</span> <span class="s2">"manual"</span> <span class="o">&gt;&gt;</span> /tmp/fan.last_rule
<span class="nb">echo</span> <span class="s2">"[Manual] Fan ON @ </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /tmp/fan.log
/usr/bin/gpioset gpiochip0 <span class="nv">227</span><span class="o">=</span>1
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight" file="/fan-off.sh"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="c">#!/bin/sh</span>
<span class="nb">echo</span> <span class="s2">"off"</span> <span class="o">&gt;&gt;</span> /tmp/fan.state
<span class="nb">echo</span> <span class="s2">"manual"</span> <span class="o">&gt;&gt;</span> /tmp/fan.last_rule
<span class="nb">echo</span> <span class="s2">"[Manual] Fan OFF @ </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /tmp/fan.log
/usr/bin/gpioset gpiochip0 <span class="nv">227</span><span class="o">=</span>0
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="last-10-fan-actions">Last 10 Fan Actions</h3>

<figure class="highlight" file="/usr/lib/lua/luci/view/fan/logview.htm"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="nt">&lt;h3</span> <span class="na">style=</span><span class="s">"margin-bottom:4px;"</span><span class="nt">&gt;</span>Last 10 Fan Actions<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"
  font-family: monospace;
  white-space: pre-wrap;
  background-color: #2c2f3a;
  color: #e0e0e0;
  padding: 10px;
  border-radius: 6px;
  max-height: 300px;
  overflow-y: auto;
  box-shadow: inset 0 0 5px rgba(0,0,0,0.5);
  border: 1px solid #444;
"</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span>
  <span class="na">local</span> <span class="na">fs = </span><span class="s">require</span> <span class="err">"</span><span class="na">nixio.fs</span><span class="err">"</span>
  <span class="na">local</span> <span class="na">log_content = </span><span class="s">fs.readfile("/tmp/fan.log")</span> <span class="na">or</span> <span class="err">""</span>
  <span class="na">local</span> <span class="na">log_lines = </span><span class="s">{}</span>
  <span class="na">for</span> <span class="na">line</span> <span class="na">in</span> <span class="na">log_content:gmatch</span><span class="err">("[^\</span><span class="na">r</span><span class="err">\</span><span class="na">n</span><span class="err">]+")</span> <span class="na">do</span>
    <span class="na">table.insert</span><span class="err">(</span><span class="na">log_lines</span><span class="err">,</span> <span class="na">line</span><span class="err">)</span>
  <span class="na">end</span>
  <span class="na">for</span> <span class="na">i = </span><span class="s">math.max(1,</span> <span class="na">#log_lines</span> <span class="na">-</span> <span class="err">9),</span> <span class="na">#log_lines</span> <span class="na">do</span>
    <span class="na">local</span> <span class="na">line = </span><span class="s">log_lines[i]</span>
    <span class="na">if</span> <span class="na">line:match</span><span class="err">("</span><span class="na">Temp</span> <span class="na">Override</span><span class="err">")</span> <span class="na">then</span>
      <span class="na">write</span><span class="err">('&lt;</span><span class="na">div</span> <span class="na">style=</span><span class="s">"color:#ff6b6b;"</span><span class="nt">&gt;</span>' .. line .. '<span class="nt">&lt;/div&gt;</span>')
    elseif line:match("Time Logic") then
      write('<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"color:#6bcf6b;"</span><span class="nt">&gt;</span>' .. line .. '<span class="nt">&lt;/div&gt;</span>')
    else
      write('<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"color:#aaa;"</span><span class="nt">&gt;</span>' .. line .. '<span class="nt">&lt;/div&gt;</span>')
    end
  end
%&gt;
<span class="nt">&lt;/div&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="fan-cronjob-service-button">Fan Cronjob Service Button</h3>

<figure class="highlight" file="/usr/lib/lua/luci/view/fan/cronjobtoggle.htm"><pre><code class="language-lua" data-lang="lua"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="o">&lt;</span><span class="n">h3</span> <span class="n">style</span><span class="o">=</span><span class="s2">"margin-bottom:4px;"</span><span class="o">&gt;</span><span class="n">Fan</span> <span class="n">Cronjob</span> <span class="n">Service</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">div</span> <span class="n">style</span><span class="o">=</span><span class="s2">"display:flex; gap:10px; margin-bottom:8px;"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">"&lt;%=luci.dispatcher.build_url('admin/system/fan/cronjob_enable')%&gt;"</span> <span class="n">class</span><span class="o">=</span><span class="s2">"cbi-button cbi-button-save"</span><span class="o">&gt;</span><span class="n">Enable</span> <span class="n">Cronjob</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">"&lt;%=luci.dispatcher.build_url('admin/system/fan/cronjob_disable')%&gt;"</span> <span class="n">class</span><span class="o">=</span><span class="s2">"cbi-button cbi-button-remove"</span><span class="o">&gt;</span><span class="n">Disable</span> <span class="n">Cronjob</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="info-status-fan">Info Status Fan</h3>

<figure class="highlight" file="/usr/lib/lua/luci/view/fan/statusinfo.htm"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="nt">&lt;h3</span> <span class="na">style=</span><span class="s">"margin-bottom:4px;"</span><span class="nt">&gt;</span>Fan Status<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"margin-bottom:8px;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">"
    font-family: monospace;
    border-collapse: collapse;
    margin: 0 auto;
    table-layout: auto;
  "</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px; width: 90px; white-space: nowrap;"</span><span class="nt">&gt;</span>CPU Temp<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px;"</span><span class="nt">&gt;&lt;strong&gt;</span>: <span class="nt">&lt;</span><span class="err">%=</span><span class="na">luci.sys.exec</span><span class="err">("</span><span class="na">expr</span> <span class="err">$(</span><span class="na">cat</span> <span class="err">/</span><span class="na">sys</span><span class="err">/</span><span class="na">class</span><span class="err">/</span><span class="na">thermal</span><span class="err">/</span><span class="na">thermal_zone0</span><span class="err">/</span><span class="na">temp</span><span class="err">)</span> <span class="err">/</span> <span class="err">1000")%</span><span class="nt">&gt;</span>°C<span class="nt">&lt;/strong&gt;&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px; width: 90px; white-space: nowrap;"</span><span class="nt">&gt;</span>Fan State<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px;"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;</span><span class="err">%</span> <span class="na">if</span> <span class="na">luci.sys.exec</span><span class="err">("</span><span class="na">cat</span> <span class="err">/</span><span class="na">tmp</span><span class="err">/</span><span class="na">fan.state</span><span class="err">")</span><span class="na">:match</span><span class="err">("</span><span class="na">on</span><span class="err">")</span> <span class="na">then</span> <span class="err">%</span><span class="nt">&gt;</span>
        <span class="nt">&lt;strong&gt;</span>: <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:#6bcf6b;"</span><span class="nt">&gt;</span>on<span class="nt">&lt;/span&gt;&lt;/strong&gt;</span>
        <span class="nt">&lt;</span><span class="err">%</span> <span class="na">else</span> <span class="err">%</span><span class="nt">&gt;</span>
        <span class="nt">&lt;strong&gt;</span>: <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"color:#ff6b6b;"</span><span class="nt">&gt;</span>off<span class="nt">&lt;/span&gt;&lt;/strong&gt;</span>
        <span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px; width: 90px; white-space: nowrap;"</span><span class="nt">&gt;</span>Last Rule<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px;"</span><span class="nt">&gt;&lt;strong&gt;</span>: <span class="nt">&lt;</span><span class="err">%=</span><span class="na">luci.sys.exec</span><span class="err">("</span><span class="na">cat</span> <span class="err">/</span><span class="na">tmp</span><span class="err">/</span><span class="na">fan.last_rule</span> <span class="err">2</span><span class="nt">&gt;</span>/dev/null")%&gt;<span class="nt">&lt;/strong&gt;&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px; width: 90px; white-space: nowrap;"</span><span class="nt">&gt;</span>Debug Mode<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">"padding:4px;"</span><span class="nt">&gt;&lt;strong&gt;</span>: <span class="nt">&lt;</span><span class="err">%=</span><span class="na">luci.sys.exec</span><span class="err">("[</span> <span class="na">-f</span> <span class="err">/</span><span class="na">tmp</span><span class="err">/</span><span class="na">fan.debug</span> <span class="err">]</span> <span class="err">&amp;&amp;</span> <span class="na">echo</span> <span class="na">ON</span> <span class="err">||</span> <span class="na">echo</span> <span class="na">OFF</span><span class="err">")%</span><span class="nt">&gt;&lt;/strong&gt;&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;hr</span> <span class="na">style=</span><span class="s">"border-top: 1px solid #444; margin: 8px 0;"</span> <span class="nt">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="manual-button">Manual Button</h3>

<figure class="highlight" file="/usr/lib/lua/luci/view/fan/buttonrow.htm"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nt">&lt;h3</span> <span class="na">style=</span><span class="s">"margin-bottom:4px;"</span><span class="nt">&gt;</span>Manual Controls<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"display:flex; gap:10px; margin-bottom:8px;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"&lt;%=luci.dispatcher.build_url('admin/system/fan/on')%&gt;"</span> <span class="na">class=</span><span class="s">"cbi-button cbi-button-save"</span><span class="nt">&gt;</span>Turn Fan ON<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"&lt;%=luci.dispatcher.build_url('admin/system/fan/off')%&gt;"</span> <span class="na">class=</span><span class="s">"cbi-button cbi-button-remove"</span><span class="nt">&gt;</span>Turn Fan OFF<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"&lt;%=luci.dispatcher.build_url('admin/system/fan/debug')%&gt;"</span> <span class="na">class=</span><span class="s">"cbi-button cbi-button-reload"</span><span class="nt">&gt;</span>Toggle Debug Mode<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;hr</span> <span class="na">style=</span><span class="s">"border-top: 1px solid #444; margin: 8px 0;"</span> <span class="nt">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="luci-dashboard-layout">LuCI Dashboard layout</h3>

<figure class="highlight" file="/usr/lib/lua/luci/model/cbi/fan/status.lua"><pre><code class="language-lua" data-lang="lua"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="kd">local</span> <span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">"nixio.fs"</span>
<span class="kd">local</span> <span class="n">log_path</span> <span class="o">=</span> <span class="s2">"/tmp/fan.log"</span>
<span class="kd">local</span> <span class="n">log_content</span> <span class="o">=</span> <span class="n">fs</span><span class="p">.</span><span class="n">readfile</span><span class="p">(</span><span class="n">log_path</span><span class="p">)</span> <span class="ow">or</span> <span class="s2">"No log found"</span>

<span class="kd">local</span> <span class="n">f</span> <span class="o">=</span> <span class="n">SimpleForm</span><span class="p">(</span><span class="s2">"fan"</span><span class="p">,</span> <span class="s2">"Fan Control Dashboard"</span><span class="p">)</span>
<span class="n">f</span><span class="p">.</span><span class="n">reset</span> <span class="o">=</span> <span class="kc">false</span>
<span class="n">f</span><span class="p">.</span><span class="n">submit</span> <span class="o">=</span> <span class="kc">false</span>

<span class="c1">-- === Status Section ===</span>
<span class="n">f</span><span class="p">:</span><span class="n">section</span><span class="p">(</span><span class="n">SimpleSection</span><span class="p">).</span><span class="n">template</span> <span class="o">=</span> <span class="s2">"fan/statusinfo"</span>
<span class="c1">-- === Fan Cronjob Service ===</span>
<span class="n">f</span><span class="p">:</span><span class="n">section</span><span class="p">(</span><span class="n">SimpleSection</span><span class="p">).</span><span class="n">template</span> <span class="o">=</span> <span class="s2">"fan/cronjobtoggle"</span>
<span class="c1">-- === Manual Controls Section ===</span>
<span class="n">f</span><span class="p">:</span><span class="n">section</span><span class="p">(</span><span class="n">SimpleSection</span><span class="p">).</span><span class="n">template</span> <span class="o">=</span> <span class="s2">"fan/buttonrow"</span>
<span class="c1">-- === Log Viewer Section ===</span>
<span class="kd">local</span> <span class="n">log_lines</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">line</span> <span class="k">in</span> <span class="n">log_content</span><span class="p">:</span><span class="n">gmatch</span><span class="p">(</span><span class="s2">"[^\r\n]+"</span><span class="p">)</span> <span class="k">do</span>
  <span class="nb">table.insert</span><span class="p">(</span><span class="n">log_lines</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
<span class="k">end</span>
<span class="kd">local</span> <span class="n">last_10</span> <span class="o">=</span> <span class="s2">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="nb">math.max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">log_lines</span> <span class="o">-</span> <span class="mi">9</span><span class="p">),</span> <span class="o">#</span><span class="n">log_lines</span> <span class="k">do</span>
  <span class="n">last_10</span> <span class="o">=</span> <span class="n">last_10</span> <span class="o">..</span> <span class="n">log_lines</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">..</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">f</span><span class="p">:</span><span class="n">section</span><span class="p">(</span><span class="n">SimpleSection</span><span class="p">).</span><span class="n">template</span> <span class="o">=</span> <span class="s2">"fan/logview"</span>

<span class="k">return</span> <span class="n">f</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="log-format">Log Format</h1>

<p>Example entries in <code class="language-plaintext highlighter-rouge">fan.log</code></p>

<figure class="highlight" file="/tmp/fan.log"><pre><code class="language-plaintext" data-lang="plaintext">...
[Temp Override] Fan ON @ 62°C - Fri Jul 11 19:10:00 WIB 2025
[Time Logic] Fan OFF @ 45°C - Fri Jul 11 22:01:00 WIB 2025
[Manual] Fan ON @ Fri Jul 11 19:15:00 WIB 2025
[Temp Override] Skipped OFF due to active hours @ 39°C - Fri Jul 11 19:20:00 WIB 2025
Fan Cronjob Service ENABLED via LuCI at 2025-07-15 21:44:24
...</code></pre></figure>

<h1 id="debug-mode">Debug Mode</h1>

<p>Enable with:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch</span> /tmp/fan.debug
</code></pre></div></div>

<p>Disable with:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">rm</span> /tmp/fan.debug
</code></pre></div></div>

<p>Adds <code class="language-plaintext highlighter-rouge">[DEBUG]</code> entries to <code class="language-plaintext highlighter-rouge">/tmp/fan.log</code>.</p>

<h1 id="bonus-runtime-fallback">Bonus!!! Runtime Fallback</h1>

<p>Since the runtime (log file) are placed in <code class="language-plaintext highlighter-rouge">/tmp</code> it will auto deleted once your device is reboot so, put this code inside <code class="language-plaintext highlighter-rouge">/etc/rc.local</code>:</p>

<figure class="highlight" file="/etc/rc.local"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre>...
<span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> /tmp/fan.log <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">touch</span> /tmp/fan.log
<span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> /tmp/fan.state <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"off"</span> <span class="o">&gt;</span> /tmp/fan.state
<span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> /tmp/fan.last_rule <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"none"</span> <span class="o">&gt;</span> /tmp/fan.last_rule
<span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> /tmp/fan-service.state <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"disabled"</span> <span class="o">&gt;</span> /tmp/fan-service.state
...
<span class="nb">exit </span>0
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>Always make sure <strong>exit 0</strong> in the last line or you command wont be executed</p>
</blockquote>

<h1 id="future-improvements">Future Improvements</h1>

<ul>
  <li>LuCI config editor for thresholds and hours</li>
  <li>YAML-based configuration</li>
  <li>Auto-expiring manual mode</li>
  <li>Fan speed control via PWM</li>
</ul>

<h1 id="refference">Refference</h1>
<p><a href="https://arrhythmicobsession.wordpress.com/2020/06/30/attaching-a-temperature-controlled-cooling-fan-on-an-orange-pi-zero-plus/">https://arrhythmicobsession.wordpress.com/attaching-a-temperature-controlled-cooling-fan</a></p>]]></content><author><name>albawid</name></author><category term="OpenWrt" /><category term="LuCI" /><summary type="html"><![CDATA[Smart fan controller designed for embedded systems running OpenWrt]]></summary></entry><entry><title type="html">Penggunaan I dan I Am</title><link href="https://albawid.github.io/posts/penggunaan-i-dan-iam/" rel="alternate" type="text/html" title="Penggunaan I dan I Am" /><published>2025-02-13T00:00:00+00:00</published><updated>2025-02-13T00:00:00+00:00</updated><id>https://albawid.github.io/posts/penggunaan-i-dan-iam</id><content type="html" xml:base="https://albawid.github.io/posts/penggunaan-i-dan-iam/"><![CDATA[<h1 id="pendahuluan">Pendahuluan</h1>
<p>Hai, seperti yang kalian sudah tau dalam bahasa inggris terdapat 2 kata yang sering digunakan yaitu “I” dan “I Am”. Meskipun terlihat mirip, sebenarnya keduanya memliki perbedaan yang signifikan dalam konteks penggunaannya. oleh karena itu dalam ketikan ini akan membahas point pentingnya saja. hehe</p>

<h1 id="penggunaan-i">Penggunaan “I”</h1>
<p>Merupakan <strong>kata ganti Subjek (orang) pertama tunggal</strong> yang digunakan untuk <strong>menyatakan tindakan atau kegiatan yang dilakukan oleh diri sendiri</strong>.</p>

<h3 id="contoh-penggunaan-i">Contoh Penggunaan “I”</h3>
<ol>
  <li>I love to read books</li>
  <li>I enjoy playing football</li>
  <li>I have lot of cat</li>
</ol>

<blockquote>
  <p>Penggunaan “I” memberikan penegasan bahwa diri sendiri sebagai pelaku dalam sebuah kalimat</p>
</blockquote>

<h1 id="2-penggunaan-i-am">2. Penggunaan “I Am”</h1>
<p>Merupakan <strong>bentuk kata kerja “To Be” (am, is, are)</strong> yang digunakan dengan subjek “I” dalam hal untuk <strong>menyatakan keadaan atau identitas diri sendiri dengan lebih spesifik</strong>.</p>

<h3 id="contoh-penggunaan-i-am">Contoh Penggunaan “I Am”</h3>
<ol>
  <li>I am playing game</li>
  <li>I am a teacher</li>
  <li>I am going to paciran</li>
</ol>

<blockquote>
  <p>Penggunaan “I Am” memberikan penekanan informasi diri sendiri secara spesifik atau menjelaskan keaadan yang sedang dilakukan oleh diri sendiri.</p>
</blockquote>

<h1 id="kesimpulan">Kesimpulan</h1>
<p>Setelah mengetahui perbedaan antara 2 kata tersebut bisa disimpulkan bahwa keduanya memiliki peran yang berbeda dalam konteks penggunaanya. “I” digunakan untuk menyatakan tindakan atau kegiatan yang dilakukan oleh diri sendiri, sedangkan “I Am” digunakan untuk memberikan informasi yang lebih spesifik tentang keadaan atau identitas diri sendiri.</p>

<h1 id="referensi">Referensi</h1>
<p><a href="https://www.perbedaan.co.id/perbedaan-i-dan-i-am/">https://www.perbedaan.co.id/perbedaan-i-dan-i-am/</a></p>]]></content><author><name>albawid</name></author><category term="tips" /><category term="catatan" /><summary type="html"><![CDATA[Membahas point pentingnya saja mengenai perbedaan penggunaan I dan I Am]]></summary></entry><entry><title type="html">Pengenalan markdown dan contoh penggunaan</title><link href="https://albawid.github.io/posts/pengenalan-markdown/" rel="alternate" type="text/html" title="Pengenalan markdown dan contoh penggunaan" /><published>2023-09-20T00:00:00+00:00</published><updated>2023-09-20T00:00:00+00:00</updated><id>https://albawid.github.io/posts/pengenalan-markdown</id><content type="html" xml:base="https://albawid.github.io/posts/pengenalan-markdown/"><![CDATA[<h1 id="pendahuluan">Pendahuluan</h1>
<p>Apa itu Markdown? Markdown adalah bahasa markup ringan yang dapat digunakan untuk menambahkan elemen pemformatan ke dokumen teks biasa. Dibuat oleh <a href="https://daringfireball.net/projects/markdown/" target="_blank">John Gruber</a> pada tahun 2004, Markdown sekarang menjadi salah satu bahasa markup paling populer di dunia.</p>

<h1 id="kenapa-harus-markdown">Kenapa Harus Markdown?</h1>
<p>Kalian mungkin bertanya-tanya mengapa kebanyakan orang menggunakan Markdown dan bukan <a href="https://en.wikipedia.org/wiki/WYSIWYG" target="_blank">WYSIWYG</a>. Berikut ini mungkin alasan yang paling populer:</p>

<ol>
  <li>Markdown dapat digunakan untuk segala hal. Orang-orang menggunakannya untuk membuat website, dokumen, catatan, buku, presentasi, email, dan dokumentasi teknis atau biasa dikenal <em>Doc Files</em>.</li>
  <li>Markdown dapat digunakan di situs seperti Reddit, GitHub, Disqus, dan sekarang Facebook juga sudah support Markdown, dan masih banyak aplikasi desktop dan berbasis web yang mendukungnya.</li>
</ol>

<h1 id="mencoba-markdown">Mencoba Markdown</h1>
<p>Cara yang paling mudah dan gratis mencoba markdown adalah dengan menggunakan tool online yang sudah disediakan <a href="https://dillinger.io/" target="_blank">Dilinger</a>.<br />
<strong>Dilinger</strong> merupakan salah satu markdown editor terbaik dan gratis, tanpa perlu download, cukup buka di PC atau Handphone dan mulai mengetik disisi kiri, dan hasil yang sudah di-render akan berada disisi kanan.</p>

<p class="p-gambar tengah" label="Dilinger"><a href="/assets/img/post/pengenalan-markdown/dillinger.png"><img src="/assets/img/post/pengenalan-markdown/dillinger.png" alt="Dilinger" /></a></p>

<h1 id="cara-kerja-markdown">Cara Kerja Markdown</h1>
<p><strong>Dillinger</strong> membuat menulis di Markdown menjadi lebih mudah karena menyembunyikan hal-hal yang terjadi di balik layar, tetapi ada baiknya jika kita mencoba mengeksplor bagaimana cara kerja markdown secara umum.<br />
<br />
Ketika kalian menulis di Markdown, teks disimpan dalam file <a href="https://id.wikipedia.org/wiki/Teks_biasa" target="_blank">plaintext</a> yang menggunakan format <code class="language-plaintext highlighter-rouge">.md</code> atau <code class="language-plaintext highlighter-rouge">.markdown</code>. Terus bagaimana file berformat Markdown dikonversi menjadi HTML atau dokumen yang siap cetak?<br />
<br />
Jawaban singkatnya adalah kalian membutuhkan aplikasi Markdown editor yang mampu memproses file Markdown. Ada banyak aplikasi yang tersedia, mulai dari script sederhana sampai aplikasi desktop yang mirip seperti Microsoft Word. Terlepas dari perbedaan visualnya, semua aplikasi mempunyai cara kerja yang sama. Seperti Dillinger, semuanya mengonversi teks berformat Markdown ke HTML sehingga dapat ditampilkan di browser web.<br />
<br />
Aplikasi Markdown editor menggunakan sesuatu yang disebut prosesor Markdown untuk mengambil teks berformat Markdown dan me-render-nya ke format HTML. Pada saat itu, dokumen kalian dapat ditampilkan di browser web atau digabungkan dengan stylesheet dan dicetak. Untuk gambaran cara kerja markdwon kurang lebih seperti dibawah ini</p>

<blockquote>
  <p>Sebernarnya aplikasi Markdown Editor dan prosesor Markdown adalah dua komponen yang terpisah. Tapi untuk kemudahan, saya menggabungkannya menjadi satu elemen (“Markdown App”) pada gambar di bawah ini.</p>
</blockquote>

<p class="p-gambar tengah" label="Cara Kerja Markdown"><a href="/assets/img/post/pengenalan-markdown/markdown-flowchart.png"><img src="/assets/img/post/pengenalan-markdown/markdown-flowchart.png" alt="markdown-flowchart" /></a></p>

<p>Dari sudut pandang kalian, mungkin prosesnya terlihat sedikit ribet, tergantung pada aplikasi yang kalian gunakan. Sebagai contoh, Dillinger pada dasarnya menggabungkan langkah 1 sampai 3 ke dalam satu tampilan, yang hanya kalian lakukan adalah mengetik di panel kiri dan output yang dirender secara ajaib muncul di panel kanan.</p>

<h1 id="contoh-penggunaan-markdown">Contoh Penggunaan Markdown</h1>
<p>Seperti yang sudah disinggung diatas, Markdown adalah cara yang cepat dan mudah untuk membuat catatan, membuat konten untuk situs web, dan menghasilkan dokumen yang siap cetak. Tidak perlu waktu lama untuk mempelajari sintaks Markdown, dan setelah kalian tahu cara menggunakannya, kalian dapat menulis menggunakan Markdown di mana saja. Kebanyakan orang menggunakan Markdown untuk membuat konten untuk web, tetapi Markdown juga bagus untuk memformat segala sesuatu mulai dari pesan email hingga daftar belanjaan.<br />
<br />
Sebagai contoh penggunaan Markdown pada Jekyll yang saya gunakan saat ini, jika kalian ingin membuat daftar isi seberti dibawah ini</p>

<p class="p-gambar tengah" label="Contoh membuat Daftar Isi"><a href="/assets/img/post/pengenalan-markdown/daftar-isi.png"><img src="/assets/img/post/pengenalan-markdown/daftar-isi.png" alt="daftar isi" /></a></p>

<p>Jika menggunakan HTML untuk mencapai hal tersebut, maka kalian harus mengetik code dibawah ini secara manual (<em>abaikan garis border dan lingkaran, karena itu masuk kedalam pseudo class</em>)</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>Daftar Isi<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;</span>Pendahuluan<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Kenapa Harus Markdown?<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Mencoba Markdown<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Cara Kerja Markdown<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Contoh Penggunaan Markdown<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Referensi<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>Dan jika dibandingkan dengan menggunakan markdown untuk mencapai hal yang sama</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Daftar Isi</span>
<span class="p">1.</span> Pendahuluan
<span class="p">2.</span> Kenapa Harus Markdown?
<span class="p">3.</span> Mencoba Markdown
<span class="p">4.</span> Cara Kerja Markdown
<span class="p">5.</span> Contoh Penggunaan Markdown
<span class="p">6.</span> Referensi
</code></pre></div></div>

<h1 id="kesimpulan">Kesimpulan</h1>
<p>Bisa kalian lihat perbedaan yang sangat signifikan antara menulis menggunakan markdown dan menggunakan html, bahkan jika kalian menggunakan markdown tidak perlu tau ilmu penulisan html, seperti yang sudah dikutip diatas markdown bisa di render ke dalam html menggunakan markdown app atau markdown editor.</p>

<h1 id="referensi">Referensi</h1>
<p><a href="https://daringfireball.net/projects/markdown/">https://daringfireball.net/projects/markdown/</a><br />
<a href="https://en.wikipedia.org/wiki/Markdown">https://en.wikipedia.org/wiki/Markdown</a><br />
<a href="https://www.markdownguide.org/getting-started">https://www.markdownguide.org/getting-started</a></p>]]></content><author><name>albawid</name></author><category term="markdown" /><category term="tips" /><category term="trik" /><summary type="html"><![CDATA[berkenalan dengan markdown, cara penulisan baru untuk mempermudah pembuatan content web statik]]></summary></entry><entry><title type="html">membuat custom user snipet vscode</title><link href="https://albawid.github.io/posts/membuat-custom-user-sinippet/" rel="alternate" type="text/html" title="membuat custom user snipet vscode" /><published>2023-09-13T00:00:00+00:00</published><updated>2023-09-13T00:00:00+00:00</updated><id>https://albawid.github.io/posts/membuat-custom-user-sinippet</id><content type="html" xml:base="https://albawid.github.io/posts/membuat-custom-user-sinippet/"><![CDATA[<h1 id="pendahuluan">Pendahuluan</h1>
<p>Halo para pembaca (<em>kalo ada haha</em>), yang berkarir sebagai <em>Developer</em> pasti tidak asing dengan code editor, ada banyak code editor yang populer salah satu nya adalah buatan Microsoft yaitu <a href="https://code.visualstudio.com/" target="_blank">Visual Studio Code</a> atau biasanya disebut <strong>VSCode</strong>, fitur yang ditawarkan sangatlah banyak mulai dari fitur dasar dan wajib ada hampir di semua code editor adalah integerasi git, kebebasan memasang ekstensi, dan yang paling penting adalah kebebasan membuat kustom user <a href="https://en.wikipedia.org/wiki/Snippet_(programming)" target="_blank">snippet code</a>.</p>

<h1 id="latar-masalah">Latar Masalah</h1>
<p>Semua Code Editor pasti mempunyai fitur dimana jika kita mengetikkan huruf maka akan muncul beberapa pilihan kata atau saran, itu adalah apa yang disebut <strong>snippet</strong>, snippet tidak terbatas pada kata atau kalimat, namun juga template script.<br />
<br />
Tapi ada keadaan dimana suatu snippet tidak bekerja sesuai apa yang kita inginkan atau bahkan tidak ada snippet yang tersedia untuk project yang kita kerjakan. Oleh karena itu untuk kasus kali ini saya akan mencoba membuat kustom snippet code untuk <a href="https://jekyllrb.com/docs/front-matter/" target="_blank">frontmatter</a> file markdown yang ada di dalam jekyll, karena sebelumnya cukup kerepotan karena selalu menulis frontmatter dengan 8 baris yang berbeda di setiap post.</p>

<h1 id="persiapan">Persiapan</h1>
<p>Buka VSCode kemudian klik Icon <strong>Setting</strong> &gt; <strong>User Snippets</strong> lalu akan ada 3 pilihan</p>
<ol>
  <li><strong>New Global Snippet File</strong> jika kalian ingin custom snippet berlaku untuk semua format file.</li>
  <li><strong>New Snipper File For project</strong> jika kalian ingin custom snippet hanya berlaku untuk project kalian saat ini.</li>
  <li>Yang terakhir hanya untuk format file tertentu maka kalian bisa buat nama <strong>format-file</strong> dan diakhiri <strong>.json</strong> contoh
    <ol>
      <li>markdown.json</li>
      <li>python.json</li>
      <li>javascript.json</li>
    </ol>
  </li>
</ol>

<p>Jika sudah maka akan terbuka tab kosong baru yang nantinya akan diisi kustom snippet, untuk sekarang biarkan seperti itu dan jangan ditutup.</p>

<h1 id="tutorial">Tutorial</h1>
<p>Buka <a href="https://snippet-generator.app/">https://snippet-generator.app/</a> kemudian ada beberapa kolom yang harus diisi:</p>
<ol>
  <li><strong>Description</strong>, deskripsi tentang snippet yang kalian buat</li>
  <li><strong>Tab trigger</strong>, kata kunci untuk memunculkan snippet yang telah kalian buat</li>
  <li><strong>Your snippet</strong>, tempat membuat kustom snippet</li>
</ol>

<p>Snippet yang ingin saya buat kurang lebih seperti berikut</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">---</span><span class="w">
</span><span class="err">layout:</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="w">
</span><span class="err">title:</span><span class="w"> </span><span class="s2">"$2"</span><span class="w">
</span><span class="err">author:</span><span class="w"> </span><span class="err">$</span><span class="mi">3</span><span class="w">
</span><span class="err">date:</span><span class="w"> </span><span class="err">$</span><span class="mi">4</span><span class="err">-$</span><span class="mi">5</span><span class="err">-$</span><span class="mi">6</span><span class="w">
</span><span class="err">tags:</span><span class="w"> </span><span class="err">$</span><span class="mi">7</span><span class="w">
</span><span class="err">excerpt:</span><span class="w"> </span><span class="err">$</span><span class="mi">8</span><span class="w">
</span><span class="err">---</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>Perlu diketahui tanda “$” merupakan <strong>Placeholder</strong> yaitu untuk memudahkan kita berpindah baris hanya menggunakan tombol <code class="language-plaintext highlighter-rouge">tab</code> tanpa menggunakan kursor.</p>
</blockquote>

<p>Setelah itu Pilih VSCode di sebelah kanan dan copy script kemudian paste ke tab kosong yang tadi sudah kita buat lalu save file tersebut.</p>

<figure class="highlight" file="markdown.json"><pre><code class="language-json" data-lang="json"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="nl">"Post Frontmatter"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"prefix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"frontmatter"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"body"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"---"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"layout: $1"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"title: </span><span class="se">\"</span><span class="s2">$2</span><span class="se">\"</span><span class="s2">"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"author: $3"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"date: $4-$5-$6"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"tags: $7"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"excerpt: $8"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"---"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Post Frontmatter"</span><span class="w">
</span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="hasil-akhir">Hasil Akhir</h1>
<p>Setelah semua selesai sekarang coba ketik kata kunci yang sudah dibuat tadi untuk memunculkan kustom snippet maka jika tidak ada kendalam akan tampil seperti berikut</p>

<p class="p-gambar tengah" label="Hasil akhir pembuatan kustom snippet"><a href="/assets/img/post/membuat-kustom-snippet/snippet.gif"><img src="/assets/img/post/membuat-kustom-snippet/snippet.gif" alt="snippet.gif" /></a></p>

<h1 id="kesimpulan">Kesimpulan</h1>
<p>seperti itulah cara membuat kustom snippet code, sangat mudah jika menggunakan tool online dengan begini kita bisa membuat snippet apapun itu, tidak terbatas pada script tapi juga bisa digunakan untuk kamus jika kalian pernah menggunakan fitur pustaka yang ada di keyboard virtual kalian di handphone.</p>]]></content><author><name>albawid</name></author><category term="vscode" /><category term="tips" /><category term="trik" /><summary type="html"><![CDATA[kesusahan mengetik tulisan yang sama namun berbeda berulang kali, maka membuat kustom snippet merupakan sebuah solusi]]></summary></entry><entry><title type="html">proses membuat website part 3</title><link href="https://albawid.github.io/posts/proses-membuat-website-part-3/" rel="alternate" type="text/html" title="proses membuat website part 3" /><published>2023-09-12T00:00:00+00:00</published><updated>2023-09-12T00:00:00+00:00</updated><id>https://albawid.github.io/posts/proses-membuat-website-part-3</id><content type="html" xml:base="https://albawid.github.io/posts/proses-membuat-website-part-3/"><![CDATA[<h1 id="pendahuluan">Pendahuluan</h1>
<p>Memasuki tahap akhir yaitu proses meng-online-kan atau bahasa kerennya <em>Deployment</em> website yang sudah dibuat agar bisa diakses secara online melalui internet, sebenarnya bisa dengan mudah kita upload semua file web yang menggunakan jekyll tersebut ke <em>Web Hosting Provider</em> seperti dibawah ini:</p>
<ol>
  <li>Niagahoster</li>
  <li>Hostinger ID</li>
  <li>Kinsta</li>
  <li>Dan lain-lain</li>
</ol>

<h1 id="latar-masalah">Latar Masalah</h1>
<p>Namun jika menggunakan Web hosting provider diatas kita akan merepotkan jika ingin memperbarui website yang sudah online dikarenakan terdapat perubahan pada website secara lokal, maka kita harus membuka web hosting yang digunakan, kemudian upload lagi file yang ingin diperbarui secara manual, oleh karena itu disini saya menggunakan <a href="https://pages.github.com/" target="_blank">Github Pages</a> sebagai web hosting, tetapi akan ada satu masalah lagi yaitu plugin <code class="language-plaintext highlighter-rouge">jekyll-toc</code> yang digunakan untuk membuat daftar isi secara otomatis pada website kali ini tidak men-support github pages, seperti yang dibilang oleh <a href="https://github.com/toshimaru/jekyll-toc/issues/29" target="_blank">toshimaru</a> selaku developer jekyll-toc.</p>

<h1 id="solusi">Solusi</h1>
<p>Disini saya anggap kalian sudah install git dan membuat repository untuk website</p>

<h2 id="menggunakan-jekyll-deploy-action">Menggunakan jekyll-deploy-action</h2>
<p>Untuk mengakali hal tersebut disini saya akan menggunakan <a href="https://github.com/jeffreytse/jekyll-deploy-action/tree/master" target="_blank">jekyll-deploy-action</a> sebagai alat untuk membantu proses deploy ke Github Pages.</p>

<h2 id="buat-folder-dan-file">Buat Folder dan File</h2>
<p>Buka folder website kita kemudian buat folder <code class="language-plaintext highlighter-rouge">.github</code> dan didalam nya buat lagi folder <code class="language-plaintext highlighter-rouge">workflows</code>, lalu buat file dengan nama sesuai keinginan kalian tapi disini saya akan menggunakan <code class="language-plaintext highlighter-rouge">build-jekyll.yml</code></p>

<h2 id="edit-build-jekyllyml">Edit build-jekyll.yml</h2>
<p>Buka file <code class="language-plaintext highlighter-rouge">build-jekyll.yml</code> lalu paste code dibawah kemudian save</p>

<figure class="highlight" file="build-jekyll.yml"><pre><code class="language-yml" data-lang="yml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s">Build and Deploy to Github Pages</span> <span class="c1"># Bisa diganti sesuai keinginan</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span> <span class="c1"># branch utama kalian, biasanya master atau main</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build_and_deploy</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
      <span class="c1"># Use GitHub Actions' cache to cache dependencies on servers</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v3</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">vendor/bundle</span>
          <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}</span>
          <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">${{ runner.os }}-gems-</span>
      <span class="c1"># Use GitHub Deploy Action to build and deploy to Github</span>
      <span class="c1"># For latest version: `jeffreytse/jekyll-deploy-action@master`</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">jeffreytse/jekyll-deploy-action@v0.5.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">provider</span><span class="pi">:</span> <span class="s1">'</span><span class="s">github'</span>         <span class="c1"># Default is github</span>
          <span class="na">token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span> <span class="c1"># It's your Personal Access Token(PAT)</span>
          <span class="na">ssh_private_key</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>        <span class="c1"># It's your SSH private key (SSH approach)</span>
          <span class="na">repository</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>             <span class="c1"># Default is current repository</span>
          <span class="na">branch</span><span class="pi">:</span> <span class="s1">'</span><span class="s">gh-pages'</span>         <span class="c1"># Default is gh-pages for github provider</span>
          <span class="na">jekyll_src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">./'</span>           <span class="c1"># Default is root directory</span>
          <span class="na">jekyll_cfg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">_config.yml'</span>  <span class="c1"># Default is _config.yml</span>
          <span class="na">jekyll_baseurl</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>         <span class="c1"># Default is according to _config.yml</span>
          <span class="na">bundler_ver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&gt;=0'</span>         <span class="c1"># Default is latest bundler version</span>
          <span class="na">cname</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>                  <span class="c1"># Default is to not use a cname</span>
          <span class="na">actor</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>                  <span class="c1"># Default is the GITHUB_ACTOR</span>
          <span class="na">pre_build_commands</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>     <span class="c1"># Installing additional dependencies (Arch Linux)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="buat-branch-baru">Buat branch baru</h2>
<p>Jika kalian belum mempunyai branch <code class="language-plaintext highlighter-rouge">gh-pages</code>, kalian bisa membuatnya dengan cara seperti dibawah</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout <span class="nt">--orphan</span> gh-pages <span class="c"># untuk membuat dan berpindah ke branch baru</span>
<span class="nv">$ </span>git <span class="nb">rm</span> <span class="nt">-rf</span> <span class="nb">.</span> <span class="c"># menghapus semua isi branch baru</span>
<span class="nv">$ </span>git commit <span class="nt">--allow-empty</span> <span class="nt">-m</span> <span class="s2">"initial commit"</span>
<span class="nv">$ </span>git push origin gh-pages
<span class="nv">$ </span>git checkout main <span class="c"># berpindah kembali ke branch main</span>
</code></pre></div></div>

<h2 id="deploy-ke-github">Deploy ke Github</h2>
<p>Memasuki tahap akhir yaitu proses deploy ke github atau bahasa jikda dalam bahasa awam proses upload file website ke github melalui terminal dengan cara seperti dibawah</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add <span class="nb">.</span> <span class="c"># untuk menambahkan semua file kedalam "daftar upload"</span>
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"sesuai keinginan"</span> <span class="c"># menulis informasi terhadap file yang ada di "daftar upload"</span>
<span class="nv">$ </span>git push origin main <span class="c"># upload semua file yang ada di "daftar upload" ke branch main</span>
</code></pre></div></div>

<p>Kemudian ubah sumber website ke branch gh-pages dengan cara buka repository website <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; Pilih <strong>gh-pages</strong> sebagai sumber.</p>

<p class="p-gambar tengah" label="Menggunakan gh-pages sebagai sumber website"><a href="/assets/img/post/proses-buat-web-p3/branch-gh-pages.png"><img src="/assets/img/post/proses-buat-web-p3/branch-gh-pages.png" alt="branch-gh-pages" /></a></p>

<h1 id="kesimpulan">Kesimpulan</h1>
<p>Gimana? menggunakan cara diatas jauh lebih mudah bukan, bahkan jika ingin memperbarui website kita hanya perlu push ke branch main saja, dan branch gh-pages akan secara otomatis mengikuti branch main. Untuk cara kerja sendiri <code class="language-plaintext highlighter-rouge">jekyll-deploy-action</code> akan me-render semua file web jekyll kita kemudian secara otomatis deploy ke branch <code class="language-plaintext highlighter-rouge">gh-pages</code> sebagai website yang sudah jadi, sehingga branch <code class="language-plaintext highlighter-rouge">main</code> hanya akan digunakan sebagai sumber dari branch gh-pages.</p>

<h1 id="referensi">Referensi</h1>
<p><a href="https://github.com/toshimaru/jekyll-toc/issues/29">https://github.com/toshimaru/jekyll-toc/issues/29</a>
<a href="https://github.com/jeffreytse/jekyll-deploy-action/tree/master">https://github.com/jeffreytse/jekyll-deploy-action/tree/master</a></p>]]></content><author><name>albawid</name></author><category term="Jekyll" /><category term="website" /><summary type="html"><![CDATA[Melanjutkan pembahasan mengenai pembuatan website part 3, Bagian Deployment Website.]]></summary></entry><entry><title type="html">proses membuat website part 2</title><link href="https://albawid.github.io/posts/proses-membuat-website-part-2/" rel="alternate" type="text/html" title="proses membuat website part 2" /><published>2023-09-11T00:00:00+00:00</published><updated>2023-09-11T00:00:00+00:00</updated><id>https://albawid.github.io/posts/proses-membuat-website-part-2</id><content type="html" xml:base="https://albawid.github.io/posts/proses-membuat-website-part-2/"><![CDATA[<h1 id="pendahuluan">Pendahuluan</h1>
<p>Melanjutkan part sebelumnya mengenai pembahasan proses pembuatan website, pada tahap ini memasuki integrasi jekyll dengan file website. Sama seperti di part 1 kali ini saya hanya menuliskan code yang penting saja dan tidak akan mencantumkan code secara keseluruhan agar post tetap enak untuk dibaca.</p>

<h1 id="instalasi-jekyll">Instalasi Jekyll</h1>
<p>Karena Jekyll merupakan <a href="https://jekyllrb.com/docs/ruby-101/#gems">RubyGem</a> maka dari itu jekyll bisa diinstall hampir di semua sistem operasi asalkan sudah menginstall beberapa aplikasi yang dibutuhkan jekyll dibawah ini.</p>

<h2 id="aplikasi-yang-dibutuhkan">Aplikasi yang dibutuhkan</h2>
<ul>
  <li><a href="https://www.ruby-lang.org/en/downloads/">Ruby</a> versi <strong>2.5.0</strong> atau lebih baru, gunakan perintah <code class="language-plaintext highlighter-rouge">ruby -v</code> untuk memastikan versi ruby.</li>
  <li><a href="https://rubygems.org/pages/download">RubyGem</a> cek versi gem <code class="language-plaintext highlighter-rouge">gem -v</code> pastikan menggunakan versi terbaru.</li>
  <li><a href="https://gcc.gnu.org/install/">GCC</a> dan <a href="https://www.gnu.org/software/make/">Make</a> gunakan <code class="language-plaintext highlighter-rouge">gcc -v</code>, <code class="language-plaintext highlighter-rouge">g++ -v</code> dan <code class="language-plaintext highlighter-rouge">make -v</code> pastikan versi paling baru.</li>
</ul>

<h2 id="langkah---langkah-install-jekyll">Langkah - Langkah Install Jekyll</h2>
<p>Karena saya menggunakan windows maka saya hanya akan menulis instalasi jekyll di windows, untuk sistem operasi lainnya akan saya cantumkan <a href="https://jekyllrb.com/docs/installation/">link menuju artikel resmi</a>.</p>

<h3 id="install-jekyll-via-rubyinstaller">Install Jekyll via RubyInstaller</h3>
<p>Cara yang paling simpel dan sangat saya rekomendasikan adalah menggunakan <a href="https://rubyinstaller.org/">RubyInstaller</a>.<br />
Pastikan menggunakan <strong>RubyInstaller</strong> versi <strong>2.4</strong> keatas agar tidak ada masalah ketika menggunakan jekyll.</p>
<ol>
  <li><a href="https://rubyinstaller.org/downloads/">Download</a> <strong>RubyInstaller versi Ruby+Devkit</strong>. pastikan gunakan opsi bawaan ketika proses instalasi.</li>
  <li>Jalankan file <code class="language-plaintext highlighter-rouge">ridk install</code> kemudian install seperti aplikasi pada umumnya, dan di akhir tahap instalasi pastikan memilih opsi <code class="language-plaintext highlighter-rouge">MSYS2 and MINGW development tool chain</code>.</li>
  <li>Buka CMD kemudian install jekyll dan bundler menggunakan <em>package manager ruby</em> yang sudah kita install sebelumnya yaitu <code class="language-plaintext highlighter-rouge">gem</code> dengan perintah <code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code>.</li>
  <li>cek versi jekyll yang sudah terinstall <code class="language-plaintext highlighter-rouge">jekyll -v</code></li>
</ol>

<blockquote>
  <p>Ketika mengecek versi jika kalian mengalami error <strong>Jekyll has not been installed properly</strong>, reboot device kemudian jalankan ulang, jika masih error pastikan terhubung internet kemudian coba reinstall RubyInstaller dan ulangi mulai step 2</p>
</blockquote>

<h3 id="install-jekyll-via-bash-windows">Install Jekyll via Bash Windows</h3>
<p>Jika kalian menggunakan windows 10 versi 1607 keatas, bisa menggunakan opsi lain yaitu menggunakan bash di terminal atau cmd windows</p>

<blockquote>
  <p>Pastikan kalian sudah mengaktifkan <strong><a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">Windows Subsytem for Linux</a></strong>.</p>
</blockquote>

<p>Pastikan repository ter-update, karena subsystem linux menggunakan ubuntu maka untuk update semua reposity gunakan perintah ini</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt-get upgrade <span class="nt">-y</span>
</code></pre></div></div>

<p>selanjutnya install ruby dari repository <a href="https://www.brightbox.com/docs/ruby/ubuntu/">BrightBox</a>, karena brightbox merupakan salah satu repository yang selalu <em>up-to-date</em> ruby ke versi terbaru.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-add-repository ppa:brightbox/ruby-ng
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>ruby2.5 ruby2.5-dev build-essential dh-autoreconf
</code></pre></div></div>

<p>kemudian update ruby gem dan install jekyll</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem update <span class="o">&amp;&amp;</span> gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<p>untuk mengecek versi jekyll gunakan <code class="language-plaintext highlighter-rouge">jekyll -v</code></p>

<h1 id="menggunakan-jekyll">Menggunakan Jekyll</h1>
<p>Setelah semuanya terinstall selanjutnya kita sudah bisa membuat website secara otomatis menggunakan jekyll, contoh disini saya mau membuat folder website-jekyll dengan nama <code class="language-plaintext highlighter-rouge">BlogPribadi</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new BlogPribadi
</code></pre></div></div>
<p>kemudian masuk kedalam folder <code class="language-plaintext highlighter-rouge">BlogPribadi</code> yang sudah di buat</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>BlogPribadi
</code></pre></div></div>

<p>bisa diketahui bahwa didalam folder <code class="language-plaintext highlighter-rouge">BlogPribadi</code> sudah terdapat template website bawaan</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BlogPribadi/
    |-- 404.html
    |-- Gemfile
    |-- Gemfile.lock
    |-- _config.yml
    |-- _posts
    |   |-- 2023-09-13-welcome-to-jekyll.markdown
    |-- about.markdown
    |-- index.markdown
</code></pre></div></div>
<p>mari kita bedah satu-satu:</p>
<ol>
  <li><strong>404.html</strong>, seperti namanya file ini hanya akan dibaca jekyll ketika link yang kita tuju tidak menemukan hasil apapun.</li>
  <li><strong>Gemfile</strong>, merupakan file untuk kita menulis plugin-plugin yang kita butuhkan di dalam jekyll, plugin bawaan kurang lebih begini jika masih belum ditambah plugin baru
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span> 
<span class="n">gem</span> <span class="s2">"jekyll"</span><span class="p">,</span> <span class="s2">"~&gt; 4.3.2"</span>
<span class="c1"># This is the default theme for new Jekyll sites. You may change this to anything you like.</span>
<span class="n">gem</span> <span class="s2">"minima"</span><span class="p">,</span> <span class="s2">"~&gt; 2.5"</span>
<span class="c1"># If you want to use GitHub Pages, remove the "gem "jekyll"" above and</span>
<span class="c1"># uncomment the line below. To upgrade, run `bundle update github-pages`.</span>
<span class="c1"># gem "github-pages", group: :jekyll_plugins</span>
<span class="c1"># If you have any plugins, put them here!</span>
<span class="n">group</span> <span class="ss">:jekyll_plugins</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"jekyll-feed"</span><span class="p">,</span> <span class="s2">"~&gt; 0.12"</span>
<span class="k">end</span>
<span class="c1"># Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem</span>
<span class="c1"># and associated library.</span>
<span class="n">platforms</span> <span class="ss">:mingw</span><span class="p">,</span> <span class="ss">:x64_mingw</span><span class="p">,</span> <span class="ss">:mswin</span><span class="p">,</span> <span class="ss">:jruby</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"tzinfo"</span><span class="p">,</span> <span class="s2">"&gt;= 1"</span><span class="p">,</span> <span class="s2">"&lt; 3"</span>
  <span class="n">gem</span> <span class="s2">"tzinfo-data"</span>
<span class="k">end</span>
<span class="c1"># Performance-booster for watching directories on Windows</span>
<span class="n">gem</span> <span class="s2">"wdm"</span><span class="p">,</span> <span class="s2">"~&gt; 0.1.1"</span><span class="p">,</span> <span class="ss">:platforms</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:mingw</span><span class="p">,</span> <span class="ss">:x64_mingw</span><span class="p">,</span> <span class="ss">:mswin</span><span class="p">]</span>
<span class="c1"># Lock `http_parser.rb` gem to `v0.6.x` on JRuby builds since newer versions of the gem</span>
<span class="c1"># do not have a Java counterpart.</span>
<span class="n">gem</span> <span class="s2">"http_parser.rb"</span><span class="p">,</span> <span class="s2">"~&gt; 0.6.0"</span><span class="p">,</span> <span class="ss">:platforms</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:jruby</span><span class="p">]</span>
<span class="o">...</span>
</code></pre></div>    </div>
  </li>
  <li><strong>_config.yml</strong>, file utama dan terpenting untuk kita mengatur semua komponen didalam folder jekyll value bawaan seperti dibawah
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span> 
<span class="na">title</span><span class="pi">:</span> <span class="s">Your awesome title</span>
<span class="na">email</span><span class="pi">:</span> <span class="s">your-email@example.com</span>
<span class="na">description</span><span class="pi">:</span> <span class="pi">&gt;-</span> <span class="c1"># this means to ignore newlines until "baseurl:"</span>
  <span class="s">Write an awesome description for your new site here. You can edit this</span>
  <span class="s">line in _config.yml. It will appear in your document head meta (for</span>
  <span class="s">Google search results) and in your feed.xml site description.</span>
<span class="na">baseurl</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># the subpath of your site, e.g. /blog</span>
<span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># the base hostname &amp; protocol for your site, e.g. http://example.com</span>
<span class="na">twitter_username</span><span class="pi">:</span> <span class="s">jekyllrb</span>
<span class="na">github_username</span><span class="pi">:</span>  <span class="s">jekyll</span>

<span class="c1"># Build settings</span>
<span class="na">theme</span><span class="pi">:</span> <span class="s">minima</span>
<span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">jekyll-feed</span>
<span class="nn">...</span>
</code></pre></div>    </div>
  </li>
  <li><strong>_posts</strong>, seperti namanya folder ini tempat menulis judul post baru
    <blockquote>
      <p>perahtikan cara penulisan judul dan tanggal post, agar nantinya judul post terbaru bisa dibaca oleh jekyll</p>
    </blockquote>
  </li>
  <li><strong>about.markdown</strong>, sama seperti namanya juga, file about ini bisa berisi alasan pembuatan website, bahkan siapa si pembuat website atau yang lainnya</li>
  <li><strong>index.markdown</strong>, file ini yang nantinya akan dibaca jekyll pertama kali, dan akan menjadi <em>homepage</em> atau <em>landing page</em></li>
</ol>

<blockquote>
  <p>untuk <code class="language-plaintext highlighter-rouge">about.markdown</code> dan <code class="language-plaintext highlighter-rouge">index-markdown</code> kenapa ditulis dengan format <code class="language-plaintext highlighter-rouge">.markdown</code> bukan <code class="language-plaintext highlighter-rouge">.html</code>? karena jekll menggunakan engine <strong>kramdown</strong> yang nantinya file berekstensi <code class="language-plaintext highlighter-rouge">.markdown</code> akan dirender kedalam format <code class="language-plaintext highlighter-rouge">.html</code> dengan tujuan untuk mempermudah dalam penulisan.</p>
</blockquote>

<p>dan sebenanya template tersebut bisa kita jalankan secara lokal</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>
<p>atau jika kalian ingin menjalankan secara lokal dan bisa diakses dengan device lain</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--host</span> 0.0.0.0
</code></pre></div></div>
<p>perintah <code class="language-plaintext highlighter-rouge">serve</code> akan menjalankan website secara lokal di <a href="http://localhost:4000/">http://localhost:4000/</a> <br />
<br />
Untuk tampilan tema bawaan jekyll seperti dibawah ini</p>

<p class="p-gambar tengah" label="Tampilan tema bawaan Jekyll"><a href="/assets/img/post/proses-buat-web-p2/serve-command.png"><img src="/assets/img/post/proses-buat-web-p2/serve-command.png" alt="serve-command" /></a></p>

<p>Sangat sederhana bukan?, tapi bisa dibuat lebih keren lagi seperti pembahasan kita selanjutnya, simak saja <em>hwhw</em></p>

<h1 id="integrasi-jekyll-dan-website">Integrasi Jekyll dan website</h1>
<p>Meskipun tertulis ‘integrasi’ tapi yang kita lakukan sebenarnya hanyalah menulis kode dan memasukannya kedalam folder jekyll dengan benar, agar konsep desain website bisa dibaca dan dijalankan oleh jekyll, tapi sebelum itu saya akan menganggap kalian sudah paham HTML, CSS dan  beberapa istilah didalam jekyll seperti liquid, frontmatter dan lain-lain, jika belum bisa kalian <a href="https://jekyllrb.com/docs/step-by-step/02-liquid/">menuju web resmi jekyll</a>.</p>

<h2 id="buat-beberapa-folder-dan-file">Buat beberapa folder dan file</h2>
<p>Seperti yang ada diatas, bahwa template bawaan jekyll sangatlah sederhana, namun kita bisa menambahkan beberapa folder yang sebenanya sudah ada di jekyll namun tidak dibuatkan secara otomatis.<br />
Pertama buat folder baru didalam folder <code class="language-plaintext highlighter-rouge">BlogPribadi</code> dengan nama:</p>
<ol>
  <li><strong>_data</strong>
folder <code class="language-plaintext highlighter-rouge">_data</code> akan digunakan untuk menyimpan data dalam format <code class="language-plaintext highlighter-rouge">.yaml</code>, bisa berisi data <code class="language-plaintext highlighter-rouge">anggota.yaml</code>, <code class="language-plaintext highlighter-rouge">organisasi.yaml</code>, <code class="language-plaintext highlighter-rouge">bar-navigasi.yaml</code> dan lain-lain, yang nantinya akan dipanggil menggunakan liquid.</li>
  <li><strong>_includes</strong>
folder <code class="language-plaintext highlighter-rouge">_includes</code> digunakan untuk menyimpan file modularisasi HTML, umumnya folder ini berisi file html yang nanti nya juga akan dipanggil menggunakan liquid.</li>
  <li><strong>assets</strong>
folder ini berisi asset yang dibutuhkan oleh website biasanya terdapat 3 folder utama:
    <ul>
      <li><strong>css</strong>, untuk mennyimpan file styling</li>
      <li><strong>img</strong>, untuk mennyimpan gambar, banner dan lainnya</li>
      <li><strong>js</strong>, untuk mennyimpan javascript</li>
    </ul>
  </li>
</ol>

<p>Kedua buat beberapa file dengan nama:</p>
<ol>
  <li><strong>post.html</strong>, untuk tampilan daftar semua post yang ada</li>
  <li><strong>project.html</strong>, untuk tampilan daftar project yang sudah dibuat</li>
  <li><strong>tag.html</strong> (<em>opsional</em>), untul tampilan semua daftar tag yang dipakai, umumnya digunakan sebagai filter, tapi disini saya memakai plugin <code class="language-plaintext highlighter-rouge">jekyll-instant-search</code> jadi untuk mem-filter tag tinggal ketik di kolom pencarian</li>
</ol>

<h2 id="edit-_configyml-sesuai-kebutuhan">Edit _config.yml sesuai kebutuhan</h2>
<p>Seperti yang sudah ditulis diatas fungsi <code class="language-plaintext highlighter-rouge">_config.yml</code> untuk menyimpan semua konfigurasi yang ada di jekyll dan jika ingin memanggil value yang ada di <code class="language-plaintext highlighter-rouge">_config.yml</code> bisa menggunakan liquid <code class="language-plaintext highlighter-rouge">{{ site.value }}</code>.</p>

<p>Edit terlebih dahulu data yang akan dipanggil:</p>

<figure class="highlight" file="_config.yml"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">...</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Blog Pribadi</span>
<span class="na">email</span><span class="pi">:</span> <span class="s">nama@email.com</span>
<span class="nn">...</span></code></pre></figure>

<p>Kemudian tulis liquid <code class="language-plaintext highlighter-rouge">{{ site.title }}</code> kedalam HTML:</p>

<figure class="highlight" file="index.html"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"id"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>{{ site.title }}<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>begitulah cara kerja liquid pada jekyll, dan jika ingin mengganti judul, tidak perlu lagi mengedit file html melainkan edit <strong>title</strong> yang ada di file <code class="language-plaintext highlighter-rouge">_config.yml</code>, maka liquid akan membaca value yg kita ubah secara otomatis.</p>

<h2 id="kesimpulan">Kesimpulan</h2>
<p>Kurang lebih seperti itu proses pembuat website pribadi ini, sebenarnya belum selesai dan masih banyak hal yang harus ditulis, <em>tapi yaa lagi malas menulis aja hehe</em>, tapi intinya jika sudah mengetahui dasar cara kerja jekyll maka tinggal memasukkan file desain web ke folder yang sudah dibuatkan, contoh untul file <strong>HTML</strong> taruh ke folder <code class="language-plaintext highlighter-rouge">_layouts/</code>, jika didalam file web desain memerlukan file html lain secara terpisah maka taruh file tersebut ke folder <code class="language-plaintext highlighter-rouge">_includes/</code>, dan untuk file stylesheet atau file <strong>CSS</strong> taruh ke folder <code class="language-plaintext highlighter-rouge">assets/css/</code> dan begitu seterusnya. Tulisan ini akan diperbarui jika ada niat.</p>]]></content><author><name>albawid</name></author><category term="Jekyll" /><category term="website" /><summary type="html"><![CDATA[Melanjutkan pembahasan mengenai pembuatan website part 2, Bagian integrasi Jekyll dengan HTML.]]></summary></entry><entry><title type="html">proses membuat website part 1</title><link href="https://albawid.github.io/posts/proses-membuat-website-part-1/" rel="alternate" type="text/html" title="proses membuat website part 1" /><published>2023-09-10T00:00:00+00:00</published><updated>2023-09-10T00:00:00+00:00</updated><id>https://albawid.github.io/posts/proses-membuat-website-part-1</id><content type="html" xml:base="https://albawid.github.io/posts/proses-membuat-website-part-1/"><![CDATA[<h1 id="pendahuluan">Pendahuluan</h1>
<p>Halo para pembaca yang membaca tulisan tidak jelas ini, maaf sebelumnya jika bahasa dan cara penulisan yang kurang benar dikarenakan saya tidak ada pengalaman sebagai <em>Content-Writer</em> atau <em>Copywriter</em> atau yang lain. Jadi dengan jadinya website ini semoga bisa saya gunakan sebagai bahan belajar tentang menulis artikel. Post dengan judul ini mungkin akan dibagi menjadi beberapa part karena saya ingin menulisnya secara detail. <em>kalau bisa wkwk</em></p>

<h1 id="latar-belakang">Latar Belakang</h1>
<p>Saya orangnya sangat suka menggunakan internet sampai di suatu hari saya ingin mempunyai website sendiri tapi masalahnya saya tidak ada background sebagai <em>Web Developer</em> apalagi menulis kode program, sehingga saya mencari tutorial membuat website, semua mengintruksikan untuk menggunakan template yang sudah ada tapi tidak ada yang cocok secara tampilan bagi saya, kemudian saya mencari tutorial belajar <em>Web Development</em> dan saya menemukan Youtube Channel <a href="https://www.youtube.com/@sandhikagalihWPU">Web Programming UNPAS</a> yang menurut saya sangat bagus dari segi materi, penyampaian, urutan pembelajaran, latihan serta tips dan trik membuat website. Dari situ saya yang awalnya nol banget tentang Web Development sampai sekarang bisa membuat website, meskipun hanya frontend saja itu pun cuma HTML dan CSS.</p>

<h1 id="software">Software</h1>
<p>Saya menggunakan <strong>Jekyll</strong> sebagai framework, jika kalian tidak tahu apa itu jekyll, kalian bisa baca di doc <a href="https://jekyllrb.com/docs/">web resmi jekyll</a>. Secara kasar, singkatnya jekyll adalah sebuah <strong>Static Site Generator</strong> atau biasa disebut <strong>SSG</strong> merupakan kerangka atau template <em>directory</em> sebuah website, sebagai contoh di jekyll ada folder dengan nama <code class="language-plaintext highlighter-rouge">_posts</code> maka jika kalian ingin membuat judul post baru kalian harus membuat file tulisan disana.</p>

<h1 id="konsep-desain-ui">Konsep Desain UI</h1>
<p>Saya ingin web simpel dan menarik namun unik, yang mempunyai total 4 tab sebagai navigasi:</p>
<ol>
  <li>Home</li>
  <li>post</li>
  <li>project</li>
  <li>about</li>
</ol>

<blockquote>
  <p>untuk code tidak akan saya tampilkan secara menyeluruh agar tidak spam karena sangat panjang, sebagai gantinya akan saya cantumkan link menuju code yang ada di <a href="https://github.com/albawid/albawid.github.io">github saya</a></p>
</blockquote>

<h2 id="home-layout">Home Layout</h2>
<p>Tampilan <em>Home</em> atau <em>Landing Page</em> yang menampilkan gambar maskot dan deskripsi author secara singkat di sisi kanan kemudian dibawahnya terdapat 3 post terbaru dan 3 project terbaru dan tombol menuju semua daftar list post dan project</p>

<p class="p-gambar tengah" label="Desain Tampilan Home"><a href="/assets/img/post/proses-buat-web-p1/home-layout.png"><img src="/assets/img/post/proses-buat-web-p1/home-layout.png" alt="Home Layout" /></a></p>

<h2 id="post-layout">Post Layout</h2>
<p>Untuk tampilan list post sama seperti yang ada di “Home” namun ada perbedaan ketika website terbuka di viewport minimal 768px dimana deskripsi post akan di matikan dengan tujuan menghemat viewport</p>

<p class="p-gambar tengah" label="Desain Tampilan list Post"><a href="/assets/img/post/proses-buat-web-p1/post-layout.png"><img src="/assets/img/post/proses-buat-web-p1/post-layout.png" alt="post Layout" /></a></p>

<h2 id="project-layout">Project Layout</h2>
<p>Tampilan list Project sama seperti list post namun ditambahkan gambar dan tag dihilangkan karena menurut saya untuk membahas project atau bahan latihan saya tidak memerlukan tag</p>

<p class="p-gambar tengah" label="Desain Tampilan list Project"><a href="/assets/img/post/proses-buat-web-p1/project-layout.png"><img src="/assets/img/post/proses-buat-web-p1/project-layout.png" alt="project Layout" /></a></p>

<h2 id="about-layout">About Layout</h2>
<p>Sebernarnya di tab <em>about</em> ini menggunakan layout project yang di <em>duplicate</em> langsung dari layout post sehingga tampilan about ini akan mirip dengan tampilan isi post dengan perbedaan tanggal dan author dimatikan.</p>

<p class="p-gambar tengah" label="Desain Tampilan About"><a href="/assets/img/post/proses-buat-web-p1/about-layout.png"><img src="/assets/img/post/proses-buat-web-p1/about-layout.png" alt="about Layout" /></a></p>

<p>Komponen daftar isi memiliki 3 level:</p>
<ol>
  <li>Heading 1, menggunakan simbol lingkaran solid
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Heading 1<span class="nt">&lt;/h1&gt;</span>
</code></pre></div>    </div>
    <p>atau jika didalam markdown</p>
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Heading 1</span>
</code></pre></div>    </div>
  </li>
  <li>Heading 2, menggunakan simbol outline lingkaran
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>Heading 2<span class="nt">&lt;/h2&gt;</span>
</code></pre></div>    </div>
    <p>atau jika didalam markdown</p>
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Heading 2</span>
</code></pre></div>    </div>
  </li>
  <li>Heading 3, menggunakan simbol kotak solid
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h3&gt;</span>Heading 3<span class="nt">&lt;/h3&gt;</span>
</code></pre></div>    </div>
    <p>atau jika didalam markdown</p>
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">### Heading 3</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>untuk hasilnya seperti dibawah ini</p>

<p class="p-gambar tengah" label="Tampilan Daftar isi"><a href="/assets/img/post/proses-buat-web-p1/daftar-isi.png"><img src="/assets/img/post/proses-buat-web-p1/daftar-isi.png" alt="daftar isi" /></a></p>

<h1 id="kesimpulan">Kesimpulan</h1>
<p>Sangat sederhana bukan?, tapi perlu diketahui pembuatan website ini dari desain tampilan sampai penulisan HTML, CSS dan sedikit Javascript hanya dilakukan oleh 1 orang saja, ya saya sendiri, meskipun saya tidak ada pengalaman sebagai <em>Web Developer</em> sebelumnya tapi saya sangat bersyukur bisa membuat website sesuai keinginan saya, ya seperti ini lah tampilan website yang saya inginkan. Untuk part selanjutnya mungkin akan membahas integrasi Jekyll dengan website.</p>]]></content><author><name>albawid</name></author><category term="jekyll" /><category term="website" /><summary type="html"><![CDATA[semua proses terkait pembuatan website akan ditulis sebagai post dengan sedetail mungkin, alih-alih biar website tidak kosong hehe]]></summary></entry></feed>